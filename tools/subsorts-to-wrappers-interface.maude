load subsorts-to-wrappers
load printing

mod SUBSORTS-TO-WRAPPERS-META is
  including SUBSORTS-TO-WRAPPERS .
  including META-LEVEL-EXTRAS .
  var KSubsorts NoKSubsorts : String .
  var Q QKSubsorts QNoKSubsorts : Qid .  var IL : ImportList .
  op resolveKSubsorts : String String ~> Module .
  eq resolveKSubsorts(KSubsorts, NoKSubsorts) = resolveKSubsorts(qid(KSubsorts), qid(NoKSubsorts)) .
  op resolveKSubsorts : Qid Qid ~> Module .
  eq resolveKSubsorts(QKSubsorts,QNoKSubsorts) = resolveKSubsorts(QNoKSubsorts, upModule(QKSubsorts, false), upModule(QKSubsorts, true), upImports(getImports(upModule(QKSubsorts, false)))) .
endm

mod SUBSORTS-TO-WRAPPERS-LOOP is 
  including LOOP-MODE + META-LEVEL .
  including MODULE-META-PRETTY-PRINT .
  op subsorts-to-wrappers : -> System .
  op idle : -> State .
  var Q KSubsorts NoKSubsorts : Qid . var QIL QIL' : QidList . var FM : Module .
  eq subsorts-to-wrappers = [nil, idle, 
 'Usage: 'resolveKSubsorts '<Name> '<Suffix> '.] .


  op wrapper : Qid -> Module .
  eq wrapper(Q) = (mod 'MKKR is including Q . 
                    sorts none . none none none none none endm) .
  op error : -> [Module] .
  op print : Module [Module] -> QidList .
  var Str : String . var M FM' : Module .
  eq print(M,FM) = eMetaPrettyPrint(setRls(setEqs(FM,none),none), FM) [owise] .
  crl ['resolveKSubsorts KSubsorts NoKSubsorts QIL, idle, QIL'] 
   => [QIL, idle, print(upModule(KSubsorts,false), FM )] 
   if FM := downTerm(getTerm(
             metaReduce(wrapper('SUBSORTS-TO-WRAPPERS-META),
                        'resolveKSubsorts[upTerm(string(KSubsorts)),upTerm(string(NoKSubsorts))])),error) .
endm
