fmod K-SORTS is including QID .
  
  ops KSentence : -> Qid .
  eq KSentence = 'KSentence .
endfm

fmod K-META-OPS is including META-TERM .
  op nilKList : -> Qid .
  eq nilKList = '.kl.KList .

  op nilK : -> Qid .
  eq nilK = '.k.EmptyK .

  op kra_ : TermList -> Term .
  eq kra(Trl1,'_~>_[Trl],Trl2) = kra(Trl1,Trl,Trl2) .
  eq kra(empty) = nilK .
  eq kra(T) = T [owise] .
  eq kra(Trl) = '_~>_[Trl] [owise] .
 
  op klabel : -> Constant .
  eq klabel = 'k.CellLabel .
 
  var T : Term .  var Trl Trl1 Trl2 : TermList . 

  op kcell : Term -> Term .
  eq kcell(T) = '<_>_</_>[klabel,T,klabel] .
  
  op kWrap : Term -> Term .
  eq kWrap(T) = kcell(kra(T,'Rest:K)) .
--- replace the line above with the one below to get unrestricted strictness
---  eq kWrap(T) = T .


  op kList : TermList -> Term .
  eq kList(T) = T .
  eq kList(empty) = nilKList .
  eq kList(Trl) = '_`,_[Trl] [owise] .

  op wrapKList : Term -> Term .
  eq wrapKList(T) = '~[T] .

  op kApply : Term TermList -> Term .
  eq kApply(T, Trl) = '_`(_`)[T,kList(Trl)] .
endfm

fmod META-K-BUILTINS is
  including META-LEVEL .
  op builtinSorts : -> SortSet [memo] .
  eq builtinSorts = getSorts(upModule('PL-BUILTINS, true)) .
endfm

fmod META-K-MODULE is
  including META-MODULE-EXTRAS .
  var S : Sort .  var T : Type .  var SSDS : SubsortDeclSet . 
  vars OPDS : OpDeclSet .

  ops EmptyK KProper KResult NeK K KLabel KProperLabel KResultLabel : -> Sort .
  ops EmptyKList ProperList NeProperList ResultList NeResultList NeKList KList : -> Sort .
  eq EmptyK = 'EmptyK .  eq KProper = 'KProper .  eq KResult = 'KResult .
  eq NeK = 'NeK .  eq K = 'K .
  eq KLabel = 'KLabel .
  eq KProperLabel = 'KProperLabel .  eq KResultLabel = 'KResultLabel .
  eq EmptyKList = 'EmptyKList .  eq ProperList = 'KProperList .  eq ResultList = 'KResultList .  eq NeProperList = 'NeKProperList .  eq NeResultList = 'NeKResultList .  eq KList = 'KList .  eq NeKList = 'NeKList .
  op ksorts : -> SortSet [memo] .
  eq ksorts = EmptyK ; KProper ; KResult ; NeK ; K .

  op klistSorts : -> SortSet [memo] .
  eq klistSorts = EmptyKList ; ProperList ; NeProperList ; ResultList ; NeResultList ; NeKList ; KList .

  op isKSort : Type -> Bool [memo] .
  eq isKSort(T) = T in ksorts .

  op isKListSort : Type -> Bool [memo] .
  eq isKListSort(T) = T in klistSorts .

  op ksubsorts : -> SubsortDeclSet [memo] .
  eq ksubsorts = (
    subsort EmptyK < K .
    subsort KProper < NeK .
    subsort KResult < NeK .
    subsort NeK < K .
    ) .

  op kops : -> OpDeclSet [memo] .
  eq kops = (
    op '.k : nil -> EmptyK [none] .
    op '_`(_`) : KLabel KList -> NeK [none] .
    op '_`(_`) : KProperLabel KList -> KProper [none] .
    op '_`(_`) : KResultLabel KList -> KResult [none] .
    op '_~>_ : K K -> K [none] .
  ) .

 op makeKLabel : Sort -> Sort .
 ceq makeKLabel(S) = KResultLabel if S = KResult .
 ceq makeKLabel(S) = KProperLabel if S = KProper .
 eq makeKLabel(S) = KLabel [owise] .
 
 op pseudoKSubsorts : SubsortDeclSet -> SubsortDeclSet .
 eq pseudoKSubsorts(SSDS) = getSubsorts(removeSubsorts(SSDS,ksubsorts), ksorts) . 
 
  op pseudoKOps : OpDeclSet -> OpDeclSet .
  eq pseudoKOps(OPDS) = getOps(removeOps(OPDS,kops), ksorts) .
endfm

fmod META-K-RULES is including K-SORTS .
  including META-MODULE .
  var Q : Qid . var T T' : Term . var S : Type . var C : Term .  var Cond : TermList .
  var AS : AttrSet .  var RK : KRuleKind .
  sort KRuleKind .
  ops krl kcrl : -> KRuleKind .
  op error : Qid -> [KRuleKind] .

  op trueCt : -> Constant .
  eq trueCt = 'true.Bool .
  
  ops symbol_ : KRuleKind -> Qid .
  eq symbol krl = 'rule_ .
  eq symbol kcrl = 'rule_if_ .  

  op replaceS : -> Qid .
  eq replaceS = '`[_=>_`] .

  op getKRuleKind : Qid ~> KRuleKind . 
  eq getKRuleKind(Q) = if Q == symbol krl then krl else if Q == symbol kcrl then kcrl else error(Q) fi fi .

  sort KRuleSplit .
  op {_,_,_,_} : KRuleKind Term TermList AttrSet -> KRuleSplit .

  
  op splitKRule : MembAx ~> KRuleSplit .
 ceq splitKRule((mb Q[T] : S [AS] .))
   = {getKRuleKind(Q),T,empty,AS} if S := KSentence . 
 ceq splitKRule((mb Q[T,C] : S [AS] .))
   = {getKRuleKind(Q),T,C,AS} if S := KSentence . 

  op getContents : KRuleSplit -> Term .
  eq getContents({RK,T,Cond,AS}) = T .

  op setContents : KRuleSplit Term -> KRuleSplit .
  eq setContents({RK,T,Cond,AS}, T') = {RK,T',Cond,AS} .

  op plugKRule : KRuleSplit ~> MembAx .
  eq plugKRule({RK,T,empty,AS}) = (mb symbol(RK)[T] : KSentence [AS] .) .
  eq plugKRule({RK,T,C,AS}) = (mb symbol(RK)[T,C] : KSentence [AS] .) [owise] .
endfm

fmod K-META-CONFIG is 
  including META-K-RULES .
  including META-K-MODULE .
  including META-TERM-EXTRAS .
  including INT .
  var Label Label' : Constant . var Contents Contents' T : Term .
  var Q Q' : Qid .  var B : Bool . var E E' : Ellipses .  var M : Module .  
  var AS : AttrSet .  var MAS : MembAxSet .  var S : Sort .

  op extractConfTerm : Module ~> Term .
  eq extractConfTerm(M) = extractConfTerm(getMbs(M)) .
  op extractConfTerm : MembAxSet ~> Term .
  eq extractConfTerm((mb 'configuration_[T] : 'KSentence [AS] .) MAS) = T .

  op removeConfTerm : MembAxSet -> MembAxSet .
  eq removeConfTerm((mb 'configuration_[T] : 'KSentence [AS] .) MAS) = MAS .
  eq removeConfTerm(MAS) = MAS [owise] .
  
  sort Ellipses .
  ops none : -> Ellipses .
  op error : -> [Ellipses] .
  op symbol_ : Ellipses -> Qid .
  eq symbol none = '<_>_</_> .

  sort SplitCell .
  op {_,_,_,_} : Constant Term Bool Ellipses -> SplitCell .

  op splitKCell : Term ~> SplitCell .
  eq splitKCell(Q[Label,Contents,Label]) = {Label, Contents,false, getEllipses(Q)} .
  eq splitKCell(Q[Q'[Label],Contents,Q'[Label]]) = {Label, Contents,true, getEllipses(Q)} .

  op getEllipses : Qid -> Ellipses .
  ceq getEllipses(Q) = none if Q = symbol none .

  op getEllipses : SplitCell -> Ellipses .
  eq getEllipses({Label,Contents,B,E}) = E .
  op setEllipses : SplitCell Ellipses -> SplitCell .
  eq setEllipses({Label,Contents,B,E}, E') = {Label,Contents,B,E'} .

  op getName : SplitCell -> Qid .
  eq getName({Label,Contents,B,E}) = getName(Label) .
  op setName : SplitCell Qid -> SplitCell .
  eq setName({Label,Contents,B,E},Q) = {mkCellLabel(Q),Contents,B,E} .

  op getContents : SplitCell -> Term .
  eq getContents({Label,Contents,B,E}) = Contents .
  op setContents : SplitCell Term -> SplitCell .
  eq setContents({Label,Contents,B,E}, Contents') = {Label,Contents',B,E} .

  op getMultiplicity : SplitCell -> Bool .
  eq getMultiplicity({Label,Contents,B,E}) = B .

  op plugCell : SplitCell -> Term .
  eq plugCell({Label,Contents,B,E}) = symbol E[cellLabel(Label,B),Contents,cellLabel(Label,B)] .

  op mkCell : Qid Term -> Term .
  eq mkCell(Q,Contents) = plugCell({mkCellLabel(Q),Contents,false,none}) .

  op mkCellLabel : Qid -> Constant . 
  eq mkCellLabel(Q) = qid(string(Q) + ".CellLabel") .

  op multiCellS : -> Qid .
  eq multiCellS = '_* .  

  op cellLabel : Constant Bool -> Term .
  eq cellLabel(Label,B) = if B then multiCellS[Label] else Label fi .

  ops Map Set List  : -> Sort .
  eq Map = 'Map . eq Set = 'Set . eq List = 'List .

  op emptyCt : Sort -> Constant .
  eq emptyCt(S) = if S == Set then mkConstant('.s,Set) else if S == Map then mkConstant('.m,Map) else if S == List then mkConstant('.l, List) else if S == K then mkConstant('.k, K) else 'error.K fi fi fi fi .

  op ctor : Sort -> Qid .
  eq ctor(S) = if S == Set then '__ else if S == Map then '__ else if S == List then '_`,_ else if S == K then '_~>_ else 'error fi fi fi fi .
endfm

fmod K-META-OPEN-CELLS is 
  including K-META-CONFIG .
  ops left right both : -> Ellipses .
  eq symbol left = '<_>..._</_> .
  eq symbol right = '<_>_...</_> .
  eq symbol both = '<_>..._...</_> .
  var Q : Qid .
  eq getEllipses(Q) = if (Q == symbol left) then left else if (Q == symbol right) then right else if (Q == symbol both) then both else if (Q == symbol none) then none else error fi fi fi fi .
endfm

fmod META-ANONYMOUS-VARIABLE is
  including META-TERM .
  including CONVERSION .
  var T : Type . var N : Nat .

  op anyVarS : -> Qid .
  eq anyVarS = '? .

  op anyVar : Type -> Variable .
  eq anyVar(T) = qid(string(anyVarS) + ":" + string(T)) .

  op anyVar : Nat Type -> Variable .
  eq anyVar(N, T) = qid(string(anyVarS) + string(N,10) + ":" + string(T)) .
endfm

fmod META-K-WRAPPERS is
  including META-LEVEL .
  vars T T' : Type . var Q : Qid . var AS : AttrSet . var OPDS : OpDeclSet .
  op builtin-wrappers : -> OpDeclSet [memo] .
  eq builtin-wrappers = getOps(upModule('K-WRAPPERS, false)) .

  op getWrappers : OpDeclSet -> OpDeclSet .
  eq getWrappers((op Q : T -> T' [metadata("builtin wrapper") AS] .) OPDS)
   = (op Q : T -> T' [metadata("builtin wrapper") AS] .) getWrappers(OPDS) .
  eq getWrappers((op Q : T -> T' [metadata("list wrapper") AS] .) OPDS)
   = (op Q : T -> T' [metadata("list wrapper") AS] .) getWrappers(OPDS) .
  eq getWrappers(OPDS) = none [owise] .

  op mkSubsortWrapper : Type Type -> Qid .
  eq mkSubsortWrapper(T,T') 
   = qid("\"" + string(T) + " < " + string(T') + "\"_") .
endfm


fmod META-K-LABELS is
  including META-K-MODULE .
  including META-LEVEL .
  var Q : Qid . var T : Type . 

  op klistLabelS : -> Qid .
  eq klistLabelS = 'kList .

  op mkKLabel : Qid -> Qid .
  eq mkKLabel(Q) = qid("\"" + string(Q) + "\"") .

  op mkListLabel : Qid -> Term .
  eq mkListLabel(Q) = klistLabelS[upTerm(string(Q))] .

  op mkKLabelSort : Type -> Type .
  eq mkKLabelSort(T) 
   = if T == KProper then KProperLabel
     else if T == KResult then KResultLabel else KLabel fi fi .
endfm

fmod K-STRICTNESS-OPS is including META-LEVEL .
  including K-META-OPS .
  op hole : -> Term .
  eq hole = '`[`].K .

  var S : String .

  op freezeLabel : String -> Term .
  eq freezeLabel(S) = 'freezer[upTerm(S)] .

  op freezeVariable : String Variable -> Term .
  eq freezeVariable(S, V:Variable) = kApply('freezeVar[upTerm(S)],V:Variable) .
endfm

fmod STRICT-ATTRS is
  including META-MODULE .
  including NAT-LIST-EXTRAS .
  ops kstrict seqkstrict : IntList -> Attr .
  op karity : Nat -> Attr .
endfm

fmod SYNTAX-ATTRS is
  including META-MODULE .
  ops kaux kdisolve : -> Attr .
  op krenameTo : Qid -> Attr .
  op ksyntax : -> Attr .
  op klatex : AttrSet -> Attr .
  op kcolor : Qid -> Attr .
endfm

fmod CONFIGURATION-ATTRS is
  including META-MODULE .
  op kwrapping : Qid -> Attr .
endfm

fmod K-ATTRS is 
  including SYNTAX-ATTRS .
  including STRICT-ATTRS .
  including CONFIGURATION-ATTRS .
endfm




