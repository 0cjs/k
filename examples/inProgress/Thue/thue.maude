load ../../../k-prelude
mod THUE is
	including K-PROPER .
	including CONFIG .
	including K-MAP-EXTRAS .
	including K-RULES .
	including K-CONFIG .
	including PL-INT .
	including PL-STRING .
	
	including K-OPEN-CELLS .
	---including K-WRAPPERS-LABELS . --- can't include this?
	
	including K .
--- Syntax
	op subst : -> KProperLabel [metadata "arity 2"] .
	op write : -> KProperLabel [metadata "arity 2"] .
	op read : -> KProperLabel [metadata "arity 2"] .
	op start : -> KProperLabel [metadata "arity 1"] .
	
--- Configuration
	op output : -> CellLabel .
	op input : -> CellLabel .
	op k : -> CellLabel .
	op rules : -> CellLabel .
	op result : -> CellLabel .
	
	mb configuration 
	< T >
		< k > K:K </ k >
		< rules > S:Set </ rules >
		< output > K:K </ output >
		< input > L:List </ input >
	</ T >  
	< result > K:K </ result > 
	: KSentence .
	
	eq [Start]: eval(K:K) =
	< T >
		< k > K:K </ k >
		< rules > .s </ rules >
		< output > .k </ output >
		< input > .l </ input >
	</ T > .

--- Semantics
	op eval : K -> Set .
	op eval : K K -> Set .
	op inject : Int -> KLabel .
	op inject : Char -> KLabel .
	op inject : String -> KLabel .
	op injectM : Map -> KLabel .
	op injectL : List -> KLabel .

	op explode : -> KProperLabel [metadata "arity 1"] .
	
	---- define explode of a string
	mb [explodeString]: rule
		explode([inject(S:String)(.kl) => inject(substrString(S:String, 1, lengthString(S:String)))(.kl)] ~> K:K ~> [.k => inject(substrString(S:String, 0, 1))(.kl)])
		if notBool(S:String ==Bool "")
		: KSentence [metadata "computational rule"] .
	mb rule
		[explode(inject("")(.kl) ~> K:K) => K:K]
		: KSentence [metadata "computational rule"] .
	---- end define explode of a string	
		
	mb [saveRule]: rule
		< k > [subst(K1:K,, K2:K) => .k] ...</ k >
		< rules >... [.s => s(subst(explode(K1:K),, explode(K2:K)))] ...</ rules >
		: KSentence [metadata "computational rule"] .
	

		
	--- mb [applySubst]: rule
		--- < k >... [K1:K => .k] ...</ k >
		--- < rules >... subst(K1:K,, K2:K)] ...</ rules >
		--- : KSentence [metadata "computational rule"] .
		

	
	
endm