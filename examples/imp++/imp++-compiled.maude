
load ../../tools/../k-prelude


mod IMP++-K-PROPER01-LABELS is
  including CONFIG .
  including K-MAP-EXTRAS .
  including PL-INT .
  including PL-VARID .
  including K-PROPER .
  including K-WRAPPERS-LABELS .
  op _.._ : Nat Nat -> KList .
  op env : -> CellLabel .
  op k : -> CellLabel .
  op nextLoc : -> CellLabel .
  op output : -> CellLabel .
  op result : -> CellLabel .
  op startConfig : K -> Set .
  op store : -> CellLabel .
  op thread : -> CellLabel .
  op threads : -> CellLabel .
  op "++_" : -> KProperLabel
    [metadata "arity 1"] .
  op "Bool < KResult"_ : Bool -> KResultLabel
    [metadata "builtin wrapper"] .
  op "Int < KResult"_ : Int -> KResultLabel
    [metadata "builtin wrapper"] .
  op "VarId < KProper"_ : VarId -> KProperLabel
    [metadata "builtin wrapper"] .
  op "_+_" : -> KProperLabel
    [metadata "arity 2 strict"] .
  op "_/_" : -> KProperLabel
    [metadata "arity 2 strict"] .
  op "_:=_" : -> KProperLabel
    [metadata "arity 2 strict(2)"] .
  op "_;_" : -> KProperLabel
    [metadata "arity 2"] .
  op "_<=_" : -> KProperLabel
    [metadata "arity 2 seqstrict"] .
  op "_and_" : -> KProperLabel
    [metadata "arity 2 strict(1)"] .
  op "env" : -> KProperLabel
    [metadata "arity 1"] .
  op "halt" : -> KProperLabel
    [metadata "arity 0"] .
  op "head" : -> KProperLabel
    [metadata "arity 1 strict"] .
  op "if_then_else_" : -> KProperLabel
    [metadata "arity 3 strict(1)"] .
  op "list_" : -> KProperLabel
    [metadata "arity 1 strict(-1)"] .
  op "not_" : -> KProperLabel
    [metadata "arity 1 strict"] .
  op "pCollatz" : -> KProperLabel
    [metadata "arity 0"] .
  op "pList" : -> KProperLabel
    [metadata "arity 0"] .
  op "pSum" : -> KProperLabel
    [metadata "arity 0"] .
  op "print_" : -> KProperLabel
    [metadata "arity 1 strict"] .
  op "skip" : -> KProperLabel
    [metadata "arity 0"] .
  op "spawn_" : -> KProperLabel
    [metadata "arity 1"] .
  op "tail" : -> KProperLabel
    [metadata "arity 1 strict"] .
  op "vars_;_" : -> KProperLabel
    [metadata "arity 2"] .
  op "vl_" : -> KResultLabel
    [metadata "arity 1"] .
  op "while_do_" : -> KProperLabel
    [metadata "arity 2"] .
  op d : -> VarId
    [format(g o)] .
  op i : -> VarId
    [format(g o)] .
  op limit : -> VarId
    [format(g o)] .
  op n : -> VarId
    [format(g o)] .
  op nn : -> VarId
    [format(g o)] .
  op nr : -> VarId
    [format(g o)] .
  op s : -> VarId
    [format(g o)] .
  op steps : -> VarId
    [format(g o)] .
  op t : -> VarId
    [format(g o)] .
  eq _`(_`)("pCollatz",.kl)
    = _`(_`)("vars_;_",_`,_(_`(_`)(kList("wklist_"),_`,_(_`(_`)("VarId < KProper"_(limit),.kl),_`,_(_`(_`)("VarId < KProper"_(steps),.kl),_`,_(_`(_`)("VarId < KProper"_(nr),.kl),_`(_`)("VarId < KProper"_(t),.kl))))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(limit),.kl),_`(_`)("Int < KResult"_(10),.kl))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(steps),.kl),_`(_`)("Int < KResult"_(10),.kl))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(nr),.kl),_`(_`)("Int < KResult"_(1),.kl))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(t),.kl),_`(_`)("Int < KResult"_(2),.kl))),_`(_`)("_;_",_`,_(_`(_`)("while_do_",_`,_(_`(_`)("_<=_",_`,_(_`(_`)("++_",_`(_`)("VarId < KProper"_(nr),.kl)),_`(_`)("VarId < KProper"_(limit),.kl))),_`(_`)("vars_;_",_`,_(_`(_`)(kList("wklist_"),_`(_`)("VarId < KProper"_(n),.kl)),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(n),.kl),_`(_`)("VarId < KProper"_(nr),.kl))),_`(_`)("spawn_",_`(_`)("_;_",_`,_(_`(_`)("while_do_",_`,_(_`(_`)("_<=_",_`,_(_`(_`)("Int < KResult"_(2),.kl),_`(_`)("VarId < KProper"_(n),.kl))),_`(_`)("vars_;_",_`,_(_`(_`)(kList("wklist_"),_`,_(_`(_`)("VarId < KProper"_(d),.kl),_`(_`)("VarId < KProper"_(nn),.kl))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(nn),.kl),_`(_`)("++_",_`(_`)("VarId < KProper"_(steps),.kl)))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(d),.kl),_`(_`)("Int < KResult"_(0),.kl))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(nn),.kl),_`(_`)("VarId < KProper"_(n),.kl))),_`(_`)("_;_",_`,_(_`(_`)("while_do_",_`,_(_`(_`)("_<=_",_`,_(_`(_`)("Int < KResult"_(2),.kl),_`(_`)("VarId < KProper"_(nn),.kl))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(d),.kl),_`(_`)("_+_",_`,_(_`(_`)("VarId < KProper"_(d),.kl),_`(_`)("Int < KResult"_(1),.kl))))),_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(nn),.kl),_`(_`)("_+_",_`,_(_`(_`)("VarId < KProper"_(nn),.kl),_`(_`)("Int < KResult"_(-2),.kl))))))))),_`(_`)("if_then_else_",_`,_(_`(_`)("_<=_",_`,_(_`(_`)("Int < KResult"_(1),.kl),_`(_`)("VarId < KProper"_(nn),.kl))),_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(n),.kl),_`(_`)("_+_",_`,_(_`(_`)("_+_",_`,_(_`(_`)("_+_",_`,_(_`(_`)("VarId < KProper"_(n),.kl),_`(_`)("VarId < KProper"_(n),.kl))),_`(_`)("VarId < KProper"_(n),.kl))),_`(_`)("Int < KResult"_(1),.kl))))),_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(n),.kl),_`(_`)("VarId < KProper"_(d),.kl))))))))))))))))),_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(n),.kl),_`(_`)("++_",_`(_`)("VarId < KProper"_(t),.kl))))))))))))),_`(_`)("_;_",_`,_(_`(_`)("while_do_",_`,_(_`(_`)("_<=_",_`,_(_`(_`)("VarId < KProper"_(t),.kl),_`(_`)("VarId < KProper"_(limit),.kl))),_`(_`)("skip",.kl))),_`(_`)("print_",_`(_`)("VarId < KProper"_(steps),.kl)))))))))))))))) .
  eq _`(_`)("pList",.kl)
    = _`(_`)("vars_;_",_`,_(_`(_`)(kList("wklist_"),_`(_`)("VarId < KProper"_(n),.kl)),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(n),.kl),_`(_`)("Int < KResult"_(10),.kl))),_`(_`)("print_",_`(_`)("head",_`(_`)("list_",_`(_`)(kList("wklist_"),_`,_(_`(_`)("VarId < KProper"_(n),.kl),_`,_(_`(_`)("Int < KResult"_(2),.kl),_`(_`)("Int < KResult"_(3),.kl))))))))))) .
  eq _`(_`)("pSum",.kl)
    = _`(_`)("vars_;_",_`,_(_`(_`)(kList("wklist_"),_`,_(_`(_`)("VarId < KProper"_(n),.kl),_`,_(_`(_`)("VarId < KProper"_(s),.kl),_`(_`)("VarId < KProper"_(i),.kl)))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(n),.kl),_`(_`)("Int < KResult"_(1000),.kl))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(s),.kl),_`(_`)("Int < KResult"_(0),.kl))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(i),.kl),_`(_`)("VarId < KProper"_(n),.kl))),_`(_`)("_;_",_`,_(_`(_`)("while_do_",_`,_(_`(_`)("_<=_",_`,_(_`(_`)("Int < KResult"_(1),.kl),_`(_`)("VarId < KProper"_(i),.kl))),_`(_`)("_;_",_`,_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(s),.kl),_`(_`)("_+_",_`,_(_`(_`)("VarId < KProper"_(s),.kl),_`(_`)("VarId < KProper"_(i),.kl))))),_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(i),.kl),_`(_`)("_+_",_`,_(_`(_`)("VarId < KProper"_(i),.kl),_`(_`)("Int < KResult"_(-1),.kl))))))))),_`(_`)("print_",_`(_`)("VarId < KProper"_(s),.kl)))))))))))) .
  eq startConfig(S:K)
    = <_>_</_>(T,__(__(__(<_>_</_>(nextLoc,_`(_`)("Int < KResult"_(0),.kl),nextLoc),<_>_</_>(output,.l,output)),<_>_</_>(store,.m,store)),<_>_</_>(threads,<_>_</_>(thread,__(<_>_</_>(k,S:K,k),<_>_</_>(env,.m,env)),thread),threads)),T) .
  eq <_>_</_>(T,__(Top:Set,<_>_</_>(output,Output:List,output),<_>_</_>(threads,.s,threads)),T)
    = <_>_</_>(result,Output:List,result) [metadata "structural rule"] .
  eq <_>_</_>(thread,__(Thread:Set,<_>_</_>(k,.k,k)),thread)
    = .s [metadata "structural rule"] .
  eq _.._(N1:Nat,N2:Nat)
    = if_then_else_fi(_>=Int_(N1:Nat,N2:Nat),.kl,_`,_(_`(_`)("Int < KResult"_(N1:Nat),.kl),_.._(sNat_(N1:Nat),N2:Nat))) [metadata "structural rule"] .
  eq __(<_>_</_>(k,_~>_(_`(_`)("env",_`(_`)(wmap_(Env:Map),.kl)),K:K),k),<_>_</_>(env,Env':Map,env))
    = __(<_>_</_>(k,K:K,k),<_>_</_>(env,Env:Map,env)) [metadata "structural rule"] .
  eq __(<_>_</_>(nextLoc,_`(_`)("Int < KResult"_(N:Nat),.kl),nextLoc),<_>_</_>(threads,__(AnyVar21:Set,<_>_</_>(thread,__(AnyVar22:Set,<_>_</_>(k,_~>_(_`(_`)("vars_;_",_`,_(_`(_`)(kList("wklist_"),Xl:KList),S:K)),K:K),k),<_>_</_>(env,Env:Map,env)),thread)),threads),<_>_</_>(store,Store:Map,store))
    = __(<_>_</_>(nextLoc,_`(_`)("Int < KResult"_(_+Int_(N:Nat,length_(Xl:KList))),.kl),nextLoc),<_>_</_>(threads,__(AnyVar21:Set,<_>_</_>(thread,__(AnyVar22:Set,<_>_</_>(k,_~>_(_~>_(S:K,_`(_`)("env",_`(_`)(wmap_(Env:Map),.kl))),K:K),k),<_>_</_>(env,_`[_<-_`](Env:Map,Xl:KList,_.._(N:Nat,_+Int_(N:Nat,length_(Xl:KList)))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m(_.._(N:Nat,_+Int_(N:Nat,length_(Xl:KList))),_`(_`)("Int < KResult"_(0),.kl))),store)) [metadata "structural rule"] .
  eq _`(_`)("list_",_`(_`)(kList("wklist_"),RL:ResultList))
    = _`(_`)("vl_",_`(_`)(kList("wklist_"),RL:ResultList)) [metadata "structural rule"] .
  rl <_>_</_>(k,_~>_(_`(_`)("halt",.kl),K:K),k)
    => <_>_</_>(k,.k,k) [metadata "computational rule"] .
  rl <_>_</_>(k,_~>_(_`(_`)("while_do_",_`,_(B:K,S:K)),K:K),k)
    => <_>_</_>(k,_~>_(_`(_`)("if_then_else_",_`,_(B:K,_`(_`)("_;_",_`,_(S:K,_`(_`)("while_do_",_`,_(B:K,S:K)))),_`(_`)("skip",.kl))),K:K),k) [metadata "computational rule"] .
  rl <_>_</_>(thread,__(Thread:Set,<_>_</_>(k,_~>_(_`(_`)("spawn_",S:K),K:K),k),<_>_</_>(env,Env:Map,env)),thread)
    => __(<_>_</_>(thread,__(<_>_</_>(k,S:K,k),<_>_</_>(env,Env:Map,env)),thread),<_>_</_>(thread,__(Thread:Set,<_>_</_>(k,K:K,k),<_>_</_>(env,Env:Map,env)),thread)) [metadata "computational rule"] .
  rl __(<_>_</_>(output,Output:List,output),<_>_</_>(threads,__(AnyVar7:Set,<_>_</_>(thread,__(AnyVar8:Set,<_>_</_>(k,_~>_(_`(_`)("print_",_`(_`)("Int < KResult"_(I:Int),.kl)),K:K),k)),thread)),threads))
    => __(<_>_</_>(output,_`,_(Output:List,l(_`(_`)("Int < KResult"_(I:Int),.kl))),output),<_>_</_>(threads,__(AnyVar7:Set,<_>_</_>(thread,__(AnyVar8:Set,<_>_</_>(k,K:K,k)),thread)),threads)) [metadata "computational rule"] .
  rl __(<_>_</_>(threads,__(AnyVar12:Set,<_>_</_>(thread,__(AnyVar13:Set,<_>_</_>(k,_~>_(_`(_`)("VarId < KProper"_(X:VarId),.kl),K:K),k),<_>_</_>(env,__(Env:Map,m(_`(_`)("VarId < KProper"_(X:VarId),.kl),_`(_`)("Int < KResult"_(L:Int),.kl))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m(_`(_`)("Int < KResult"_(L:Int),.kl),_`(_`)("Int < KResult"_(I:Int),.kl))),store))
    => __(<_>_</_>(threads,__(AnyVar12:Set,<_>_</_>(thread,__(AnyVar13:Set,<_>_</_>(k,_~>_(_`(_`)("Int < KResult"_(I:Int),.kl),K:K),k),<_>_</_>(env,__(Env:Map,m(_`(_`)("VarId < KProper"_(X:VarId),.kl),_`(_`)("Int < KResult"_(L:Int),.kl))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m(_`(_`)("Int < KResult"_(L:Int),.kl),_`(_`)("Int < KResult"_(I:Int),.kl))),store)) [metadata "computational rule"] .
  rl __(<_>_</_>(threads,__(AnyVar13:Set,<_>_</_>(thread,__(AnyVar14:Set,<_>_</_>(k,_~>_(_`(_`)("++_",_`(_`)("VarId < KProper"_(X:VarId),.kl)),K:K),k),<_>_</_>(env,__(Env:Map,m(_`(_`)("VarId < KProper"_(X:VarId),.kl),_`(_`)("Int < KResult"_(L:Int),.kl))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m(_`(_`)("Int < KResult"_(L:Int),.kl),_`(_`)("Int < KResult"_(I:Int),.kl))),store))
    => __(<_>_</_>(threads,__(AnyVar13:Set,<_>_</_>(thread,__(AnyVar14:Set,<_>_</_>(k,_~>_(_`(_`)("Int < KResult"_(_+Int_(I:Int,1)),.kl),K:K),k),<_>_</_>(env,__(Env:Map,m(_`(_`)("VarId < KProper"_(X:VarId),.kl),_`(_`)("Int < KResult"_(L:Int),.kl))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m(_`(_`)("Int < KResult"_(L:Int),.kl),_`(_`)("Int < KResult"_(_+Int_(I:Int,1)),.kl))),store)) [metadata "computational rule"] .
  rl __(<_>_</_>(threads,__(AnyVar13:Set,<_>_</_>(thread,__(AnyVar14:Set,<_>_</_>(k,_~>_(_`(_`)("_:=_",_`,_(_`(_`)("VarId < KProper"_(X:VarId),.kl),_`(_`)("Int < KResult"_(I1:Int),.kl))),K:K),k),<_>_</_>(env,__(Env:Map,m(_`(_`)("VarId < KProper"_(X:VarId),.kl),_`(_`)("Int < KResult"_(L:Int),.kl))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m(_`(_`)("Int < KResult"_(L:Int),.kl),_`(_`)("Int < KResult"_(I2:Int),.kl))),store))
    => __(<_>_</_>(threads,__(AnyVar13:Set,<_>_</_>(thread,__(AnyVar14:Set,<_>_</_>(k,K:K,k),<_>_</_>(env,__(Env:Map,m(_`(_`)("VarId < KProper"_(X:VarId),.kl),_`(_`)("Int < KResult"_(L:Int),.kl))),env)),thread)),threads),<_>_</_>(store,__(Store:Map,m(_`(_`)("Int < KResult"_(L:Int),.kl),_`(_`)("Int < KResult"_(I1:Int),.kl))),store)) [metadata "computational rule"] .
  rl _`(_`)("_+_",_`,_(_`(_`)("Int < KResult"_(I1:Int),.kl),_`(_`)("Int < KResult"_(I2:Int),.kl)))
    => _`(_`)("Int < KResult"_(_+Int_(I1:Int,I2:Int)),.kl) [metadata "computational rule"] .
  rl _`(_`)("_;_",_`,_(S1:K,S2:K))
    => _~>_(S1:K,S2:K) [metadata "computational rule"] .
  rl _`(_`)("_<=_",_`,_(_`(_`)("Int < KResult"_(I1:Int),.kl),_`(_`)("Int < KResult"_(I2:Int),.kl)))
    => _`(_`)("Bool < KResult"_(_<=Int_(I1:Int,I2:Int)),.kl) [metadata "computational rule"] .
  rl _`(_`)("_and_",_`,_(_`(_`)("Bool < KResult"_(false),.kl),B:K))
    => _`(_`)("Bool < KResult"_(false),.kl) [metadata "computational rule"] .
  rl _`(_`)("_and_",_`,_(_`(_`)("Bool < KResult"_(true),.kl),B:K))
    => B:K [metadata "computational rule"] .
  rl _`(_`)("head",_`(_`)("vl_",_`(_`)(kList("wklist_"),_`,_(_`(_`)("Int < KResult"_(I:Int),.kl),RL:ResultList))))
    => _`(_`)("Int < KResult"_(I:Int),.kl) [metadata "computational rule"] .
  rl _`(_`)("if_then_else_",_`,_(_`(_`)("Bool < KResult"_(false),.kl),S1:K,S2:K))
    => S2:K [metadata "computational rule"] .
  rl _`(_`)("if_then_else_",_`,_(_`(_`)("Bool < KResult"_(true),.kl),S1:K,S2:K))
    => S1:K [metadata "computational rule"] .
  rl _`(_`)("not_",_`(_`)("Bool < KResult"_(T:Bool),.kl))
    => _`(_`)("Bool < KResult"_(notBool_(T:Bool)),.kl) [metadata "computational rule"] .
  rl _`(_`)("skip",.kl)
    => .k [metadata "computational rule"] .
  rl _`(_`)("tail",_`(_`)("vl_",_`(_`)(kList("wklist_"),_`,_(_`(_`)("Int < KResult"_(I:Int),.kl),RL:ResultList))))
    => _`(_`)("vl_",_`(_`)(kList("wklist_"),RL:ResultList)) [metadata "computational rule"] .
  crl _`(_`)("_/_",_`,_(_`(_`)("Int < KResult"_(I1:Int),.kl),_`(_`)("Int < KResult"_(I2:Int),.kl)))
    => _`(_`)("Int < KResult"_(_/Int_(I1:Int,I2:Int)),.kl)
    if _=/=Bool_(I2:Int,0)= true [metadata "computational rule"] .
endm



mod IMP++-K-PROPER-STRICTNESS is
  including IMP++-K-PROPER01-LABELS .
  including K-STRICTNESS .
  eq <_>_</_>(k,_~>_(_`(_`)("_+_",_`,_(K1:K,Kcxt:KProper)),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"_+_\"(K1:K,[])"),_`(_`)(freezeVar("K1:K"),K1:K)),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("_+_",_`,_(Kcxt:KProper,K2:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"_+_\"([],K2:K)"),_`(_`)(freezeVar("K2:K"),K2:K)),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("_/_",_`,_(K1:K,Kcxt:KProper)),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"_/_\"(K1:K,[])"),_`(_`)(freezeVar("K1:K"),K1:K)),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("_/_",_`,_(Kcxt:KProper,K2:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"_/_\"([],K2:K)"),_`(_`)(freezeVar("K2:K"),K2:K)),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("_:=_",_`,_(K1:K,Kcxt:KProper)),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"_:=_\"(K1:K,[])"),_`(_`)(freezeVar("K1:K"),K1:K)),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("_<=_",_`,_(K1:KResult,Kcxt:KProper)),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"_<=_\"(K1:KResult,[])"),_`(_`)(freezeVar("K1:KResult"),K1:KResult)),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("_<=_",_`,_(Kcxt:KProper,K2:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"_<=_\"([],K2:K)"),_`(_`)(freezeVar("K2:K"),K2:K)),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("_and_",_`,_(Kcxt:KProper,K2:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"_and_\"([],K2:K)"),_`(_`)(freezeVar("K2:K"),K2:K)),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("head",Kcxt:KProper),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"head\"([])"),.kl),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("if_then_else_",_`,_(Kcxt:KProper,K2:K,K3:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"if_then_else_\"([],K2:K,K3:K)"),_`,_(_`(_`)(freezeVar("K2:K"),K2:K),_`(_`)(freezeVar("K3:K"),K3:K))),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("list_",_`(_`)(kList("wklist_"),_`,_(Kl1-1:KList,Kcxt:KProper,Kl1-2:KList))),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"list_\"(kList(\"wklist_\")(Kl1-1:KList,[],Kl1-2:KList))"),_`,_(_`(_`)(freezeVar("Kl1-1:KList"),Kl1-1:KList),_`(_`)(freezeVar("Kl1-2:KList"),Kl1-2:KList))),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("not_",Kcxt:KProper),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"not_\"([])"),.kl),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("print_",Kcxt:KProper),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"print_\"([])"),.kl),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(_`(_`)("tail",Kcxt:KProper),Rest:K),k)
    = <_>_</_>(k,_~>_(Kcxt:KProper,_`(_`)(freezer("\"tail\"([])"),.kl),Rest:K),k) [metadata "heating"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"_+_\"(K1:K,[])"),_`(_`)(freezeVar("K1:K"),K1:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("_+_",_`,_(K1:K,Kcxt:KResult)),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"_+_\"([],K2:K)"),_`(_`)(freezeVar("K2:K"),K2:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("_+_",_`,_(Kcxt:KResult,K2:K)),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"_/_\"(K1:K,[])"),_`(_`)(freezeVar("K1:K"),K1:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("_/_",_`,_(K1:K,Kcxt:KResult)),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"_/_\"([],K2:K)"),_`(_`)(freezeVar("K2:K"),K2:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("_/_",_`,_(Kcxt:KResult,K2:K)),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"_:=_\"(K1:K,[])"),_`(_`)(freezeVar("K1:K"),K1:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("_:=_",_`,_(K1:K,Kcxt:KResult)),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"_<=_\"(K1:KResult,[])"),_`(_`)(freezeVar("K1:KResult"),K1:KResult)),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("_<=_",_`,_(K1:KResult,Kcxt:KResult)),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"_<=_\"([],K2:K)"),_`(_`)(freezeVar("K2:K"),K2:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("_<=_",_`,_(Kcxt:KResult,K2:K)),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"_and_\"([],K2:K)"),_`(_`)(freezeVar("K2:K"),K2:K)),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("_and_",_`,_(Kcxt:KResult,K2:K)),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"head\"([])"),.kl),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("head",Kcxt:KResult),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"if_then_else_\"([],K2:K,K3:K)"),_`,_(_`(_`)(freezeVar("K2:K"),K2:K),_`(_`)(freezeVar("K3:K"),K3:K))),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("if_then_else_",_`,_(Kcxt:KResult,K2:K,K3:K)),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"list_\"(kList(\"wklist_\")(Kl1-1:KList,[],Kl1-2:KList))"),_`,_(_`(_`)(freezeVar("Kl1-1:KList"),Kl1-1:KList),_`(_`)(freezeVar("Kl1-2:KList"),Kl1-2:KList))),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("list_",_`(_`)(kList("wklist_"),_`,_(Kl1-1:KList,Kcxt:KResult,Kl1-2:KList))),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"not_\"([])"),.kl),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("not_",Kcxt:KResult),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"print_\"([])"),.kl),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("print_",Kcxt:KResult),Rest:K),k) [metadata "cooling"] .
  eq <_>_</_>(k,_~>_(Kcxt:KResult,_`(_`)(freezer("\"tail\"([])"),.kl),Rest:K),k)
    = <_>_</_>(k,_~>_(_`(_`)("tail",Kcxt:KResult),Rest:K),k) [metadata "cooling"] .
endm

mod LANG-TEST is
  including IMP++-K-PROPER01-LABELS .
  including IMP++-K-PROPER-STRICTNESS .
endm


