load pl-builtins

--- Level 0

mod K is 
  including PL-NAT .
  sorts EmptyK KResult NeK K .
  subsorts KResult < NeK < K .
  subsort EmptyK < K .
  op .k : -> EmptyK [metadata "latex(renameTo \\ensuremath{\\kdot})"].
  op _~>_ : K K -> K [prec 100  assoc id: .k metadata "latex(renameTo _\\ensuremath{\\kra}_)"] .


  sorts EmptyKList KResultList NeKResultList KList NeKList .
  op .kl : -> EmptyKList .
  subsort K < NeKList < KList .
  subsort EmptyKList < KResultList < KList .
  subsort KResult < NeKResultList < KResultList NeKList .

  op _`,_ : KList KList -> KList [assoc id: .kl prec 121] .
  --- One should not modify the precedence above.  
  --- Might cause the compilation to fail.
  op _`,_ : NeKList KList -> NeKList [ditto] .
  op _`,_ : KList NeKList -> NeKList [ditto] .
  op _`,_ : KResultList KResultList -> KResultList [ditto] .
  op _`,_ : NeKResultList KResultList -> NeKResultList [ditto] .
  op _`,_ : KResultList NeKResultList -> NeKResultList [ditto] .


  op length_ : KList -> Nat . 
  eq length(.kl) = 0 .
  eq length(K:K,KL:KList) = sNat length(KL:KList) . 

  sorts KLabel KResultLabel .

  subsorts KResultLabel < KLabel .
  
  op _`(_`) : KLabel KList -> NeK [prec 0 gather(& &)] .
  op _`(_`) : KResultLabel KList -> KResult [ditto] .

  sort ListItem List NeList .
  subsort ListItem < NeList < List .
  op .l : -> List .
  op l : K -> ListItem  .
  op _,_ : List List -> List [assoc id: .l] .
  op _,_ : NeList List -> NeList [ditto] .
  op _,_ : List NeList -> NeList [ditto] .
  var LItem : ListItem .  var List : List .
  op length_ : List -> Nat .
  eq length(.l) = 0 .
  eq length(LItem,List) = sNat length(List) .

  sort SetItem Set NeSet .
  subsort SetItem < NeSet < Set .
  op .s : -> Set .
  op s : K -> SetItem .
  op __ : Set Set -> Set [assoc comm id: .s] .
  op __ : NeSet Set -> NeSet [ditto] .
  
  sort MapItem Map NeMap .
  subsort MapItem < NeMap < Map .
  op .m : -> Map .
  op _|->_ : K K -> MapItem .
  op __ : Map Map -> Map [assoc comm id: .m prec 120] .
  op __ : NeMap Map -> NeMap [ditto] .

  op _[_/_] : Map K K -> Map [prec 0] .

  var Map : Map .  vars K1 K2 K2' : K .
  eq (Map K1 |-> K2)[K2' / K1] = Map K1 |-> K2' .
  eq Map[K2 / K1] = Map K1 |-> K2 [owise] .
endm

mod CONFIG is including K .
  sort CellLabel .
  ops k T : -> CellLabel .
  op <_>_</_> : CellLabel K CellLabel -> SetItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel List CellLabel -> SetItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel Set CellLabel -> SetItem [prec 0 format(nib g b o+ -b g b o)] .
  op <_>_</_> : CellLabel Map CellLabel -> SetItem [prec 0 format(nib g b o+ -b g b o)] .
endm

mod K-SENTENCE is
  sort KSentence . 
endm

--- KProper Level

mod K-PROPER is
  including K .
  sort KProper .
  subsort KProper < NeK .
--- next line is useful only if not using <k> wrappers for strictness
---  op _~>_ : KProper K -> KProper [ditto] .
  sort NeKProperList .
  subsort KProper < NeKProperList < NeKList .  
  sort KProperLabel .
  subsort KProperLabel < KLabel .
  op _`(_`) : KProperLabel KList -> KProper [ditto] .
  op _`,_ : NeKProperList KList -> NeKProperList [ditto] .
  op _`,_ : KList NeKProperList -> NeKProperList [ditto] .
endm

--- Strictness Level

mod K-STRICTNESS is 
  including CONFIG .
  including PL-STRING .
  op freezer : String -> KLabel .
  op freezeVar : String -> KLabel .
endm

mod K-STRICTNESS-INTERNAL is
  including K .
  including K-SENTENCE .
  ops context_ : K -> [KSentence] [prec 127] .
  op [] : -> K .
endm


--- KLabel-Wrappers level

mod K-WRAPPERS-LABELS is
  including CONFIG .
  including PL-STRING .
  op wklabel_ : KLabel -> KLabel [metadata "builtin wrapper"] .
  op wcelllabel_ : CellLabel -> KLabel [metadata "builtin wrapper"] .
  op kList : String -> KLabel [metadata "list wrapper"] .
  op wset_ : Set -> KLabel [metadata "builtin wrapper"] .
  op wlist_ : List -> KLabel [metadata "builtin wrapper"] .
  op wmap_ : Map -> KLabel [metadata "builtin wrapper"] .
endm


--- K-Wrappers level

mod K-WRAPPERS is
  including CONFIG .
  op wklabel_ : KLabel -> K [metadata "builtin wrapper"] .
  op wcelllabel_ : CellLabel -> K [metadata "builtin wrapper"] .
  op wklist_ : KList -> K [metadata "list wrapper"] .
  op wset_ : Set -> K [metadata "builtin wrapper"] .
  op wlist_ : List -> K [metadata "builtin wrapper"] .
  op wmap_ : Map -> K [metadata "builtin wrapper"] .
endm

---- K Rules Level 

mod K-RULES is
  including K-SENTENCE .
  including PL-BOOL .
  ops rule_ : Universal -> [KSentence] [prec 127 poly(1) format(b o d)] .
  ops rule_if_ : Universal Bool -> [KSentence] [prec 127 poly(1) format (b o b o d)] .
--- TODO: and a mixing of structural/bidirectional attributes
  op `[_=>_`] : Universal Universal -> Universal [poly (0 1 2) prec 0] .
endm


--- Anonymous variables level

mod K-ANONYMOUS-VARIABLES is
  op ? : -> Universal [poly (0)] .
endm

--- ... level
mod K-OPEN-CELLS is
  including CONFIG .
  op <_>..._...</_> : CellLabel K CellLabel -> SetItem [prec 0] .
  op <_>..._...</_> : CellLabel List CellLabel -> SetItem [prec 0] .
  op <_>..._...</_> : CellLabel Set CellLabel -> SetItem [prec 0] .
  op <_>..._...</_> : CellLabel Map CellLabel -> SetItem [prec 0] .
  op <_>..._</_> : CellLabel K CellLabel -> SetItem [prec 0] .
  op <_>..._</_> : CellLabel List CellLabel -> SetItem [prec 0] .
  op <_>..._</_> : CellLabel Set CellLabel -> SetItem [prec 0] .
  op <_>..._</_> : CellLabel Map CellLabel -> SetItem [prec 0] .
  op <_>_...</_> : CellLabel K CellLabel -> SetItem [prec 0] .
  op <_>_...</_> : CellLabel List CellLabel -> SetItem [prec 0] .
  op <_>_...</_> : CellLabel Set CellLabel -> SetItem [prec 0] .
  op <_>_...</_> : CellLabel Map CellLabel -> SetItem [prec 0] .
endm

---- Context transformers level

mod K-CONFIG is
  including CONFIG .
  including K-SENTENCE .
  op configuration_ : Set -> [KSentence] [prec 127] .
--- TODO: rename to "configuration_"
  op _* : CellLabel -> CellLabel .
endm

--- extra stuff

mod K-MAP-EXTRAS is
  including K .
  var Map : Map .  var List : KList . var NList1 NList2 : NeKList .
  vars K1 K2 K2' K : K .
  op _|->_ : KList KList -> Map [ditto] .
  eq (K1,NList1) |-> (K2, NList2) = (K1 |-> K2) (NList1 |-> NList2) .
  eq (K1,NList1) |-> K2 = (K1 |-> K2) (NList1 |-> K2) .
  eq .kl |-> List = .m .

  op _[_/_] : Map KList KList -> Map [ditto] .
  eq Map[(K1,NList1) / (K2, NList2)] = (Map[K1 / K2])[NList1 / NList2] .
  eq Map[K2 / (K1,NList1)] = (Map[K2 / K1])[K2 / NList1] .
  eq Map[List / .kl] = Map .
endm


